using System.Collections.Generic;
using UnityEngine;
using System.Collections;

public class MousePicking : MonoBehaviour
{
    IMouse Mouse;
    IGamepads Gamepads;
    Camera Camera;

    public GameObject Selected;
    float SinceSelected;

    public GameObject Planet;
    public GameObject LinkTemplate;
    public GameObject CapsuleTemplate;

    GameObject CurrentLink;
    bool DragAllowed;

    public readonly List<Structure> Structures = new List<Structure>();
    public readonly List<ArcLink> Links = new List<ArcLink>();

	void Start()
	{
	    Mouse = MouseManager.Instance;
	    Gamepads = GamepadsManager.Instance;
	    Camera = Camera.main;
	}

    void Update()
    {
        var position = Mouse.Position;
        bool gpu = false;
        GamepadState agp = null;
        if (Gamepads.Any.Connected)
        {
            position = new Point(Screen.width / 2, Screen.height / 2);
            gpu = true;
            agp = Gamepads.Any;
        }

        if (agp.B.State == ComplexButtonState.Pressed)
        {
            var ray = Camera.ScreenPointToRay(new Vector3(position.X, position.Y, Camera.nearClipPlane));

            float nearestDistance = float.MaxValue;
            ArcLink nearestLink = null;
            RaycastHit info;

            foreach (var link in Links)
                foreach (var c in link.GetComponentsInChildren<Collider>())
                    if (c.Raycast(ray, out info, float.MaxValue) && info.distance < nearestDistance)
                    {
                        nearestDistance = info.distance;
                        nearestLink = link;
                    }

            if (nearestLink != null)
                nearestLink.Unlink();
        }

        if (gpu && agp.A.State == ComplexButtonState.Up)
        {
            var ray = Camera.ScreenPointToRay(new Vector3(position.X, position.Y, Camera.nearClipPlane));

            float nearestDistance = float.MaxValue;
            GameObject nearestObject = null;
            RaycastHit info;
            foreach (var structure in Structures)
                foreach (var c in structure.GetComponentsInChildren<Collider>())
                    if (!structure.IsEmitting && structure.GetComponent<Cannon>() == null && c.Raycast(ray, out info, float.MaxValue) && info.distance < nearestDistance)
                    {
                        if (Vector3.Dot(structure.transform.position, ray.direction) < 0)
                        {
                            nearestDistance = info.distance;
                            nearestObject = structure.gameObject;
                        }
                    }

            if (nearestObject != null)
            {
                if (nearestObject != Selected)
                {
                    Deselect();
                    Select(nearestObject);
                }
            }
            else if (Selected != null)
            {
                SinceSelected += Time.deltaTime;
                if (SinceSelected > 0.375f)
                    Deselect();
            }
        }

        if ((agp.X.State.IsDown() || agp.X.State.IsDown()) && Selected != null && Selected.GetComponent<Structure>() is Resource)
        {
            var resource = Selected.GetComponent<Resource>();

            var ray = Camera.ScreenPointToRay(new Vector3(position.X, position.Y, Camera.nearClipPlane));

            RaycastHit info;
            if (resource.Inner.collider.Raycast(ray, out info, float.MaxValue))
                resource.HighlightSphere(resource.Inner);
            else if (resource.Outer.collider.Raycast(ray, out info, float.MaxValue))
                resource.HighlightSphere(resource.Outer);
            else
                resource.HighlightSphere(null);
        }

        if (agp.X.State == ComplexButtonState)
        {
            DragAllowed = Selected != null;
            if (DragAllowed)
            {
                //var ray = Camera.ScreenPointToRay(new Vector3(Mouse.LeftButton.DragState.Start.X, Mouse.LeftButton.DragState.Start.Y, Camera.nearClipPlane));

                var resource = Selected.GetComponent<Resource>();
                if (resource != null)
                {
                    float hue = 0;

                    //RaycastHit info;
                    //if (resource.Inner.collider.Raycast(ray, out info, float.MaxValue))
                    //    hue = resource.InnerHue;
                    //else if (resource.Outer.collider.Raycast(ray, out info, float.MaxValue))
                    //    hue = resource.OuterHue;
                    //else
                    //    DragAllowed = false;

                    DragAllowed = true;
                    hue = agp.X.State == ComplexButtonState.Up ? resource.InnerHue : resource.OuterHue;

                    if (DragAllowed)
                    {
                        CurrentLink = (GameObject) Instantiate(LinkTemplate);
                        CurrentLink.transform.parent = transform;
                        CurrentLink.GetComponent<ArcLink>().Hue = hue;
                        CurrentLink.GetComponent<ArcLink>().From = Selected;
                        resource.LinkTo = CurrentLink.GetComponent<ArcLink>();
                    }
                }

                var capsule = Selected.GetComponent<Capsule>();
                if (capsule != null)
                {
                    CurrentLink = (GameObject)Instantiate(LinkTemplate);
                    CurrentLink.transform.parent = transform;
                    CurrentLink.GetComponent<ArcLink>().Hue = capsule.Hue;
                    CurrentLink.GetComponent<ArcLink>().From = Selected;
                    capsule.LinkTo = CurrentLink.GetComponent<ArcLink>();
                }
            }
        }

        if (DragAllowed && CurrentLink != null && CurrentLink.GetComponent<ArcLink>().Initialized && (Mouse.LeftButton.State == MouseButtonState.Dragging || Mouse.LeftButton.State == MouseButtonState.DragStarted))
        {
            var ray = Camera.ScreenPointToRay(new Vector3(position.X, position.Y, Camera.nearClipPlane));

            RaycastHit info;
            var origin = Selected.transform.position;
            if (Planet.collider.Raycast(ray, out info, 1000))
                CurrentLink.GetComponent<ArcLink>().Rebuild(Vector3.Normalize(origin), Vector3.Normalize(info.point));
        }

        if (DragAllowed && Mouse.LeftButton.State == MouseButtonState.DragEnded && CurrentLink != null)
        {
            var ray = Camera.ScreenPointToRay(new Vector3(position.X, position.Y, Camera.nearClipPlane));

            float nearestDistance = float.MaxValue;
            GameObject nearestObject = null;
            RaycastHit info;
            foreach (var structure in Structures)
            {
                if (structure.GetComponentInChildren<Collider>().Raycast(ray, out info, float.MaxValue))
                {
                    if (info.distance < nearestDistance && structure.gameObject != Selected)
                    {
                        nearestDistance = info.distance;
                        nearestObject = structure.gameObject;
                    }
                }
            }
            if (nearestObject != null)
            {
                var p = nearestObject.transform.position;
                CurrentLink.GetComponent<ArcLink>().Rebuild(Vector3.Normalize(Selected.transform.position), Vector3.Normalize(p));

                var nearestCannon = nearestObject.GetComponent<Cannon>();
                var nearestShield = nearestObject.GetComponent<ShieldGenerator>();
                var nearestCapsule = nearestObject.GetComponent<Capsule>();

                Selected.GetComponent<Structure>().LinkFrom = CurrentLink.GetComponent<ArcLink>();

                if (nearestShield != null)
                {
                    nearestShield.LinkHue(CurrentLink.GetComponent<ArcLink>().Hue);

                    var s = CurrentLink.GetComponent<ArcLink>().From.GetComponent<Structure>();
                    if (s is Resource)
                    {
                        (s as Resource).IsEmitting = true;
                        (s as Resource).ChooseSphere(CurrentLink.GetComponent<ArcLink>().Hue);
                    }

                    CurrentLink.GetComponent<ArcLink>().To = nearestObject;
                    nearestShield.LinkFrom = CurrentLink.GetComponent<ArcLink>();
                    Links.Add(CurrentLink.GetComponent<ArcLink>());
                }
                else if (nearestCannon != null)
                {
                    nearestCannon.LinkHue(CurrentLink.GetComponent<ArcLink>().Hue);

                    var s = CurrentLink.GetComponent<ArcLink>().From.GetComponent<Structure>();
                    if (s is Resource)
                    {
                        (s as Resource).IsEmitting = true;
                        (s as Resource).ChooseSphere(CurrentLink.GetComponent<ArcLink>().Hue);
                    }

                    CurrentLink.GetComponent<ArcLink>().To = nearestObject;
                    nearestCannon.LinkFrom = CurrentLink.GetComponent<ArcLink>();
                    Links.Add(CurrentLink.GetComponent<ArcLink>());
                }
                else if (nearestCapsule != null)
                {
                    nearestCapsule.LinkHue(CurrentLink.GetComponent<ArcLink>().Hue);

                    CurrentLink.GetComponent<ArcLink>().To = nearestObject;
                    nearestCapsule.LinkFrom = CurrentLink.GetComponent<ArcLink>();
                    Links.Add(CurrentLink.GetComponent<ArcLink>());

                    var s = CurrentLink.GetComponent<ArcLink>().From.GetComponent<Structure>();
                    if (s is Resource)
                    {
                        (s as Resource).IsEmitting = true;
                        (s as Resource).ChooseSphere(CurrentLink.GetComponent<ArcLink>().Hue);
                    }
                }
                else
                {
                    if (nearestObject.GetComponent<Resource>() != null && nearestObject.GetComponent<Resource>().IsEmitting)
                    {
                        Deselect();
                        if (Selected != null)
                            Selected.GetComponent<Structure>().LinkTo = null;
                        Destroy(CurrentLink);
                    }
                    else
                    {
                        var go = (GameObject)Instantiate(CapsuleTemplate, p, Quaternion.LookRotation(Vector3.Normalize(p)) * Quaternion.AngleAxis(90, Vector3.right));
                        go.transform.parent = transform;
                        go.GetComponent<Capsule>().LinkHue(CurrentLink.GetComponent<ArcLink>().Hue);
                        go.GetComponent<Structure>().LinkFrom = CurrentLink.GetComponent<ArcLink>();

                        CurrentLink.GetComponent<ArcLink>().To = go;

                        var s = CurrentLink.GetComponent<ArcLink>().From.GetComponent<Structure>();
                        if (s is Resource)
                        {
                            (s as Resource).IsEmitting = true;
                            (s as Resource).ChooseSphere(CurrentLink.GetComponent<ArcLink>().Hue);
                        }

                        Links.Add(CurrentLink.GetComponent<ArcLink>());

                        //s = nearestObject.GetComponent<Structure>();
                        //if (s is Resource)
                        //    Structures.Remove(s);
                        //Destroy(nearestObject);
                    }
                }

                Deselect();

                if (CurrentLink.GetComponent<ArcLink>().From.GetComponent<Resource>() != null)
                    CurrentLink.GetComponent<ArcLink>().SpawnBullet();
            }
            else
            {
                if (Selected != null)
                    Selected.GetComponent<Structure>().LinkTo = null;
                Destroy(CurrentLink);
            }

            CurrentLink = null;
        }
        if (Mouse.LeftButton.State == MouseButtonState.DragEnded && !DragAllowed && Selected != null)
            Deselect();
    }

    void Select(GameObject toSelect)
    {
        SinceSelected = 0;

        Selected = toSelect;

        var s = Selected.GetComponent<Structure>();
        if (s is Resource)
            (s as Resource).ShowSpheres();
    }

    void Deselect()
    {
        if (Selected == null) return;

        var s = Selected.GetComponent<Structure>();
        if (s is Resource)
            (s as Resource).HideSpheres();

        Selected = null;
    }

    public void StructureAdded(Structure structure)
    {
        Structures.Add(structure);
    }
    public void StructureRemoved(Structure structure)
    {
        Structures.Remove(structure);
    }
    public void LinkRemoved(ArcLink link)
    {
        Links.Remove(link);
    }
}
